/*
 * File: app/view/ListaCarros.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('CarListings.view.ListaCarros', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.listacarros',

    requires: [
        'Ext.grid.Panel',
        'Ext.grid.View',
        'Ext.grid.column.Column',
        'Ext.XTemplate',
        'Ext.chart.Chart',
        'Ext.chart.axis.Category',
        'Ext.chart.axis.Numeric',
        'Ext.chart.series.Column'
    ],

    border: '100 150 100 100',
    frame: true,
    height: 500,
    margin: '',
    width: 631,
    title: 'Lista de carros',

    layout: {
        type: 'vbox',
        align: 'stretch'
    },

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'gridpanel',
                    flex: 1,
                    store: 'CarDataStore',
                    columns: [
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'manufacturer',
                            text: 'Manufacturer'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'model',
                            text: 'Model'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'price',
                            text: 'Price'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'wiki',
                            text: 'Wiki'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'img',
                            text: 'Img'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'quality',
                            text: 'Quality'
                        }
                    ],
                    listeners: {
                        select: {
                            fn: me.onGridpanelSelect,
                            scope: me
                        }
                    }
                },
                {
                    xtype: 'panel',
                    flex: 1,
                    margins: '5 0 0 0',
                    itemId: 'detailPanel',
                    tpl: [
                        '<img src="data/{img}" style="float:right"/>',
                        'Manufacturer: {manufacturer}<br/>',
                        '  Model: <a href="{wiki}" target="_blank">{model}</a><br/>',
                        '  Price: {price:usMoney}<br/>'
                    ],
                    width: 150,
                    title: 'Detalle'
                },
                {
                    xtype: 'panel',
                    flex: 1,
                    margins: '5 0 0 0',
                    itemId: 'chartPanel',
                    width: 150,
                    layout: 'fit',
                    title: 'Calidad',
                    items: [
                        {
                            xtype: 'chart',
                            height: 250,
                            itemId: 'qualityChart',
                            width: 400,
                            animate: true,
                            insetPadding: 20,
                            store: 'CarChartStore',
                            axes: [
                                {
                                    type: 'Category',
                                    fields: [
                                        'name'
                                    ],
                                    title: 'Categoría',
                                    position: 'bottom'
                                },
                                {
                                    type: 'Numeric',
                                    fields: [
                                        'rating'
                                    ],
                                    majorTickSteps: 4,
                                    title: 'Puntuación',
                                    maximum: 5,
                                    minimum: 0,
                                    position: 'left'
                                }
                            ],
                            series: [
                                {
                                    type: 'column',
                                    label: {
                                        display: 'insideEnd',
                                        field: 'rating',
                                        color: '#333',
                                        'text-anchor': 'middle'
                                    },
                                    xField: 'name',
                                    yField: 'rating'
                                }
                            ]
                        }
                    ]
                }
            ]
        });

        me.callParent(arguments);
    },

    onGridpanelSelect: function(rowmodel, record, index, eOpts) {
        // grab a reference to the detailPanel via itemId
        // the # in front of the id indicates that we would like to grab a reference by
        var detailPanel = this.child('#detailPanel');
        // update the detailPanel with data
        // this will trigger the tpl to become updates
        detailPanel.update(record.data);

        // grab a reference to the qualityChart, notice we use down here instead of child
        // because down will go down the container hierarchy at any depth and child
        // only retrieves direct children
        var chart = this.down('#qualityChart');
        // get the quality field out of this record
        var qualityData = record.get('quality');
        chart.store.loadData(qualityData);
    }

});